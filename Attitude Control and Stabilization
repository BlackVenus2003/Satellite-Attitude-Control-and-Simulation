import numpy as np
from scipy.integrate import solve_ivp
from pyquaternion import Quaternion
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Satellite parameters
I = np.diag([10, 15, 20])  # Moment of inertia matrix (kg·m²)
reaction_wheel_torque = np.array([0.0, 0.0, 0.0])  # Initial torque from reaction wheels

# Control gains for reaction wheels
Kp = 2.0  # Proportional gain
Kd = 1.0  # Derivative gain

# External disturbance torque (simulates perturbations)
disturbance_torque = np.array([0.01, -0.02, 0.015])  # Constant disturbance (N·m)

# Satellite dynamics function
def satellite_dynamics(t, state, I, disturbance_torque):
    q = Quaternion(state[:4])  # Orientation (quaternion)
    omega = state[4:]          # Angular velocity (rad/s)

    # Quaternion derivative
    q_dot = 0.5 * Quaternion(0, *omega) * q

    # Reaction wheel torque (control input)
    global reaction_wheel_torque
    reaction_wheel_torque = -Kp * omega - Kd * np.sign(omega)  # PD control law

    # Total torque
    total_torque = reaction_wheel_torque + disturbance_torque

    # Angular velocity derivative
    omega_dot = np.linalg.inv(I).dot(total_torque - np.cross(omega, I.dot(omega)))

    # Combine derivatives
    return np.concatenate([q_dot.elements, omega_dot])

# Initial state: Orientation (quaternion) + Angular velocity (rad/s)
q0 = Quaternion(axis=[1, 0, 0], angle=np.pi/6)  # Initial orientation
omega0 = np.array([0.5, -0.3, 0.2])             # Initial angular velocity
state0 = np.concatenate([q0.elements, omega0])

# Simulation time
t_span = (0, 50)  # Simulate for 50 seconds
t_eval = np.linspace(t_span[0], t_span[1], 500)  # 500 time points

# Solve the dynamics
solution = solve_ivp(satellite_dynamics, t_span, state0, args=(I, disturbance_torque), t_eval=t_eval)

# Extract results
time = solution.t
quaternions = solution.y[:4].T
angular_velocity = solution.y[4:].T

# Visualization: 2D Angular Velocity + 3D Orientation
fig = plt.figure(figsize=(12, 6))

# 2D Angular Velocity Plot
ax1 = fig.add_subplot(121)
ax1.plot(time, angular_velocity)
ax1.set_title("Angular Velocity Over Time")
ax1.set_xlabel("Time (s)")
ax1.set_ylabel("Angular Velocity (rad/s)")
ax1.legend(["ω_x", "ω_y", "ω_z"])
ax1.grid()

# 3D Orientation Plot
ax2 = fig.add_subplot(122, projection="3d")
origin = [0, 0, 0]
quiver_scale = 1.5

# Iterate through quaternions and plot orientations
for i, q_array in enumerate(quaternions[::50]):  # Fewer points for clarity
    q = Quaternion(q_array)  # Convert array back to Quaternion
    rotation_matrix = q.rotation_matrix
    x_dir = rotation_matrix[:, 0]
    y_dir = rotation_matrix[:, 1]
    z_dir = rotation_matrix[:, 2]

    ax2.quiver(*origin, *x_dir, color="r", length=quiver_scale, normalize=True)
    ax2.quiver(*origin, *y_dir, color="g", length=quiver_scale, normalize=True)
    ax2.quiver(*origin, *z_dir, color="b", length=quiver_scale, normalize=True)

ax2.set_xlim([-2, 2])
ax2.set_ylim([-2, 2])
ax2.set_zlim([-2, 2])
ax2.set_xlabel("X")
ax2.set_ylabel("Y")
ax2.set_zlabel("Z")
ax2.set_title("3D Orientation of Satellite")

plt.tight_layout()
plt.show()


